// This file controls gradle, which we are using to install and update the RLBot framework used by this example bot,
// and also compile and run the java code used by this bot.

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

sourceCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

repositories {
    jcenter()
}

mainClassName = 'com.eru.rlbot.bot.main.LaunchComplex39'

// This directory will be created and the interface dll copied into it at runtime.
// The end result is that the interface dll will be available for loading.
def dllDirectory = '\\build\\dll'

applicationDefaultJvmArgs = ["-Djna.library.path=" + dllDirectory, "-Duser.dir=C:\\Code\\AGC"]

// https://www.mkyong.com/gradle/gradle-application-plugin-app_home-in-applicationdefaultjvmargs/
startScripts {
    doLast {
        windowsScript.text = windowsScript.text.replace('MY_WORKING_DIR', "%~dp0..")
    }
}

dependencies {
    // Fetch the framework jar file
    compile 'org.rlbot.commons:framework:1.+'
    compile 'com.google.guava:guava:27.1-jre'
    compile 'com.google.protobuf:protobuf-java:3.4.0'
    compile 'com.google.protobuf:protobuf-java-util:3.4.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1'
    compile group: 'org.ejml', name: 'ejml-ddense', version: '0.35'
    compile group: 'org.ejml', name: 'ejml-simple', version: '0.35'

    testCompile 'junit:junit:4.12'
    testCompile 'com.google.truth:truth:1.0.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    // This is makes it easy to find the dll when running in intellij, where JVM args don't get passed from gradle.
    runtime files(dllDirectory)
}

task checkPipUpgradeSafety {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def exitValue = exec {
                commandLine "python", "-c", "from rlbot.utils import public_utils; print(public_utils.is_safe_to_upgrade());"
                standardOutput = os
                ignoreExitValue = true
            }.exitValue

            // If the exit value is nonzero, the command  probably failed because rlbot is not installed at all.
            ext.isSafe = exitValue != 0 || os.toString().trim() == "True"
        }
    }
}


// Uses pip (the python package manager) to install all the python packages needed for this bot, as defined
// in requirements.txt.
task pipInstallRequirements {
    dependsOn 'checkPipUpgradeSafety'

    doLast {
        if (checkPipUpgradeSafety.isSafe) {
            exec {
                commandLine "python", "-m", "pip", "install", "-r", "requirements.txt", "--upgrade"
            }
        } else {
            println 'Skipping upgrade attempt because files are in use.'
        }
    }
}

task createDllDirectory {
    mkdir dllDirectory
}

// Installs or updates RLBot. Empty task for now. It still does stuff because it "dependsOn" tasks that do things.
task updateRLBot {
    dependsOn 'pipInstallRequirements'
    dependsOn 'createDllDirectory'
}
updateRLBot.dependsOn pipInstallRequirements

applicationDistribution.exclude(dllDirectory)

// You can run gradew.bat distZip to generate a zip file suitable for tournament submissions.
// It will be generated in build/distributions
distZip {
    into ('python') {
        from fileTree('src/main/python') {
            exclude '__pycache__'
        }
    }
    into (applicationName + '/bin') {
        from fileTree('port.cfg')
    }
}

protobuf {
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }

        grpc_python {
            path = "python -m grpc_tools.protoc"
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            // Apply the "grpc" plugin whose spec is defined above, without
            // options.  Note the braces cannot be omitted, otherwise the
            // plugin will not be added. This is because of the implicit way
            // NamedDomainObjectContainer binds the methods.
            grpc { }

            python { }
        }
    }
}

task printClasspath {
    doLast {
        configurations.testRuntime.each { println it }
    }
}
